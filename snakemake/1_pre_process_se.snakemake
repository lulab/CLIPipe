include: './0_common.snakemake'

output_dir = config.get("output_dir")
summary_dir = config.get('summary_dir')

def get_all_inputs(wildcards):
    available_inputs = dict(
        # fastqc_raw
        fastqc_raw_html=expand('{output_dir}/fastqc_raw/{sample_id}_fastqc.html', output_dir=output_dir, sample_id=sample_ids),
        fastqc_raw_zip=expand('{output_dir}/fastqc_raw/{sample_id}_fastqc.zip', output_dir=output_dir, sample_id=sample_ids),
        # multiqc_raw
        multiqc_raw_html=expand('{output_dir}/multiqc_raw/multiqc_report.html', output_dir=output_dir),
        # pre_process
        fastq_pre_porcess=expand('{output_dir}/pre_process/{sample_id}.clipped.filtered.collapsed.trimmed.fa',output_dir=output_dir, sample_id=sample_ids),
    )
    enabled_inputs = list(available_inputs.keys())
    inputs = []
    for key, l in available_inputs.items():
        if key in enabled_inputs:
            inputs += l
    return inputs

rule all:
    input:
        get_all_inputs

###------------------------The output section---------------------------###
    
rule fastqc_raw:
    input:
        auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}.fastq')
    output:
        html='{output_dir}/fastqc_raw/{sample_id}_fastqc.html',
        zip='{output_dir}/fastqc_raw/{sample_id}_fastqc.zip'
    params:
        output_prefix='{output_dir}/fastqc_raw/',
    threads:
        1
    # conda:
    #     "./envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control_raw/fastqc/{sample_id}.log'
    shell:
        ''' fastqc -f fastq -o {params.output_prefix} {input} > {log} 2>&1
        '''


rule multiqc_raw:
    input:
        fastqc=expand('{output_dir}/fastqc_raw/{sample_id}_fastqc.zip',
            output_dir=output_dir, sample_id=sample_ids)
    output:
        multiqc_raw_html='{output_dir}/multiqc_raw/multiqc_report.html',
        multiqc_raw_general_stats='{output_dir}/multiqc_raw/multiqc_data/multiqc_general_stats.txt',
        multiqc_raw_txt='{output_dir}/multiqc_raw/multiqc_data/multiqc_fastqc.txt',
    params:
        fastqc_dir='{output_dir}/fastqc_raw',
        multiqc_out_dir='{output_dir}/multiqc_raw'
    threads:
        1
    # conda:
    #     "./envs/quality_control.yaml"
    log:
        '{output_dir}/log/quality_control_raw/multiqc.log'
    shell:
        '''multiqc -f -m fastqc -o {params.multiqc_out_dir} {params.fastqc_dir} > {log} 2>&1
        '''

rule clip_adapter:
    input:
        fastq=auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}.fastq'),
    output:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.fastq',
    params:
        adapter=config.get('adapter1')
    threads: 
        config.get('threads_compress')
    # conda:
    #     "./envs/pre_process.yaml"
    log:
        '{output_dir}/log/pre_process/clip_adapter_{sample_id}.log'
    shell:
        '''fastx_clipper \
            -a {params.adapter} \
            -l 13 \
            -Q 33 \
            -v \
            -i {input.fastq} \
            -o {output.fastq}
        '''

rule filter_quality:
    input:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.fastq',
    output:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.filtered.fastq',
    threads: 
        config.get('threads_compress')
    # conda:
    #     "./envs/pre_process.yaml"
    log:
        '{output_dir}/log/pre_process/filter_quality_{sample_id}.log'
    shell:
        '''fastq_quality_filter \
            -q 20 \
            -p 80 \
            -Q 33 \
            -v \
            -i {input.fastq} \
            -o {output.fastq}
        '''

rule collapse_duplicate:
    input:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.filtered.fastq',
    output:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.filtered.collapsed.fa',
    threads: 
        config.get('threads_compress')
    # conda:
    #     "./envs/pre_process.yaml"
    log:
        '{output_dir}/log/pre_process/collapse_duplicate_{sample_id}.log'
    shell:
        '''fastx_collapser \
            -Q 33 \
            -v \
            -i {input.fastq} \
            -o {output.fastq}
        '''


rule barcode_removal:
    input:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.filtered.collapsed.fa',
    output:
        fastq='{output_dir}/pre_process/{sample_id}.clipped.filtered.collapsed.trimmed.fa',
    params:
        barcode_length=config.get('barcode_length')
    threads: 
        config.get('threads_compress')
    # conda:
    #     "./envs/pre_process.yaml"
    log:
        '{output_dir}/log/pre_process/barcode_removal_{sample_id}.log'
    shell:
        '''fastx_trimmer \
            -f {params.barcode_length} \
            -v \
            -i {input.fastq} \
            -o {output.fastq}
        '''
